Apply Model (sklearn)

python.png
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<operator activated="true" class="python_scripting:execute_python" compatibility="6.5.000" expanded="true" height="94" name="Apply Model (sklearn)" width="90" x="648" y="75">
  <parameter key="script" value="import pandas as pd&#10;import copy&#10;&#10;# rm_main is a mandatory function,&#10;# the number of arguments has to be the number of input ports (can be none)&#10;&#10;&#10;def rm_main(clf, data):&#10;    meta =  data.rm_metadata&#10;    workingdata = copy.copy(data)&#10;&#10;    for attributename in meta.keys():&#10;        attributetype = meta[attributename][0]&#10;        attributerole = meta[attributename][1]&#10;        if attributerole == &quot;label&quot;:&#10;            label = attributename&#10;        # Drop all special attributes&#10;        elif attributerole is not None:&#10;            print attributerole&#10;            workingdata = workingdata.drop(attributename, axis=1)&#10;&#10;    predictions = clf.predict(workingdata.drop(label, axis=1))&#10;    confidences = clf.predict_proba(workingdata.drop(label, axis=1))&#10;&#10;    predictions = pd.DataFrame(predictions, columns=[&quot;prediction(&quot;+label+&quot;)&quot;])&#10;    confidences = pd.DataFrame(confidences,&#10;                               columns=[&quot;confidence(&quot; + c + &quot;)&quot; for c in clf.classes_])&#10;    data = data.join(predictions)&#10;    data = data.join(confidences)&#10;    data.rm_metadata = meta&#10;    data.rm_metadata[&quot;prediction(&quot;+label+&quot;)&quot;] = (meta[label][0],&quot;prediction&quot;)&#10;    for c in clf.classes_:&#10;        data.rm_metadata[&quot;confidence(&quot;+c+&quot;)&quot;] = (&quot;numerical&quot;,&quot;confidence_&quot;+c)&#10;&#10;    return data, clf&#10;"/>
</operator>

